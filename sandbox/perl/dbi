#!/usr/bin/env perl

use strict;
use warnings;
use DBI;

die "Usage: $0 <dbname>\n" unless @ARGV==1;
my $dbname=shift @ARGV;
my $dbh=DBI->connect("DBI:SQLite:dbname=$dbname") or die "Failed to connect to db: ".DBI->errstr;
my $sth=$dbh->prepare('SELECT * FROM people WHERE lastname = ?') or die "Failed to prepare statement: ".$dbh->errstr;

print "Enter name> ";
while (my $lastname=<>)
{
	my @data;
	chomp $lastname;
	$sth->execute($lastname) or die "Failed to execute statement: ".$sth->errstr;

	#read matching records and print them out
	while (@data=$sth->fetchrow_array())
	{
		my $firstname=$data[1];
		my $id=$data[2];
		print "\t$id: $firstname $lastname\n";
	}

	if ($sth->rows == 0)
	{
		print "No names matched '$lastname'.\n\n";
	}

	$sth->finish;
	print "\n";
	print "Enter name> ";
}

print "age_by_id result (id=3): ",&age_by_id($dbh,'3'),"\n";
$dbh->disconnect;

sub age_by_id
{
    my ($dbh,$id)=@_;
    my $sth=$dbh->prepare_cached("SELECT age FROM people WHERE id = ?") or die "Failed to prepare statement: ".$dbh->errstr;
    #$sth->bind_param(1,$id,{TYPE=>'SQL_NUMERIC'});
    $sth->execute($id) or die "Failed to execute statement: ".$sth->errstr;
    my ($age)=$sth->fetchrow_array();
    #print "rows: ".$sth->rows."\n";
    return $age;
}

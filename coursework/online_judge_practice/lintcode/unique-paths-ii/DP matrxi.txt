class Solution:
    """
    @param obstacleGrid: An list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # wrte your code here
        n = len(obstacleGrid)
        if n == 0:
            return([])
        m = len(obstacleGrid[0])
        import copy
        o = copy.deepcopy(obstacleGrid)
        #initialize first row
        i = None
        if 1 in obstacleGrid[0]:
            i = obstacleGrid[0].index(1)
        else:
            i = m
        o[0][:i] = [1]*i
        o[0][i:] = [0]*(m-i)
        #initialize first column
        hasObstacle = False
        for i in range(n):
            if obstacleGrid[i][0] == 1:
                hasObstacle = True
            if hasObstacle:
                o[i][0] = 0
            else:
                o[i][0] = 1
        #fill the matrix
        for i in range(1,n):
            for j in range(1,m):
                if obstacleGrid[i][j] == 1:
                    o[i][j] = 0
                else:
                    o[i][j] = o[i-1][j] + o[i][j-1]
        return(o[-1][-1])

                


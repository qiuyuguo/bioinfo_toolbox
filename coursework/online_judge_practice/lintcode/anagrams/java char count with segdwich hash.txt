import java.util.*;
public class Solution {
    /**
     * @param strs: A list of strings
     * @return: A list of strings
     */
    public List<String> anagrams(String[] strs) {
        // write your code here
        // construct frequency count array
        // manually calculate hash key
        // good for short string and small alphabet
        Map<Long, List<String>> seen = new HashMap<Long, List<String>>();
        for (String i : strs) {
            long hashkey = genHashKey(i);
            if(seen.containsKey(hashkey)) {
                seen.get(hashkey).add(i);
            } else {
                List<String> l = new LinkedList<String>();
                l.add(i);
                seen.put(hashkey, l);
            }
        }
        List<String> ret = new LinkedList<String>();
        for (long i : seen.keySet()) {
            List<String> l = seen.get(i);
            if (l.size() > 1) {
                ret.addAll(l);//assume one and only one group of anagrams
            }
        }
        return(ret);
    }
    /*private long genHashKey(String s) {
        long ret = 1;
        int[] primes = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29,
            31, 37, 41, 43, 47, 53, 59, 61, 67, 71,
            73, 79, 83, 89, 97, 101
        };
        int[] charCount = count(s);
        for (int i = 0; i < 26; i++) {
            ret = ret * (long) Math.pow(primes[i], charCount[i]);
        }
        return(ret);
    }*/
        private long genHashKey(String s) {
        long ret = 0;
        int a = 23;
        int b = 11;
        int[] charCount = count(s);
        for (int i : charCount) {
            ret = ret * a + i;
            a = a * b;
        }
        return(ret);
        
    }
    private int[] count(String s) {
        int[] ret = new int[26];
        for (int i = 0; i < s.length(); i++) {
            ret[s.charAt(i) - 'a']++;
        }
        return(ret);
    }
}

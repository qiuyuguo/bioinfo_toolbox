import string
class Solution:
    # @param board, a list of lists of 1 length string
    # @param words: A list of string
    # @return: A list of string
    def wordSearchII(self, board, words):
        # write your code here
        #first construct trie to store the words
        dict = trieNode()
        for i in words:
            dict.insert(i)
        #then examine the board
        n = len(board)
        if n == 0:
            return([])
        m = len(board[0])
        if m == 0:
            return([])
        ret = []
        visited = [False]*n
        for i in range(n):
            visited[i] = [False]*m
        for i in xrange(n):
            for j in xrange(m):
                ret.extend(self.search(board,visited,'',n,m,i,j,dict))
        from sets import Set
        return(list(Set(ret)))
    def search(self,board,visited,s,n,m,i,j,oldHit):
        #examine all possible strings
        #starting at board[i][j]
        #extend by one letter every time
        if i < 0 or j < 0 or i >= n or j >= m or visited[i][j]:
            return([])
        s += board[i][j]
        t = board[i][j] #add t for guiding the search, not for final output
        ret = []
        hit = oldHit.partialHit(t)
        #print('current'+s)
        if hit != None:
            visited[i][j] = True
            #print('partial hit'+s)
            ret.extend(self.search(board,visited,s,n,m,i-1,j,hit))
            ret.extend(self.search(board,visited,s,n,m,i+1,j,hit))
            ret.extend(self.search(board,visited,s,n,m,i,j-1,hit))
            ret.extend(self.search(board,visited,s,n,m,i,j+1,hit))
            visited[i][j] = False
            if hit.val:
                ret.append(s)
        return(ret)
    
class trieNode:
    def __init__(self):
        self.val = False
        self.child = {}
    def insert(self,s):
        '''insert a string s
        into trie
        '''
        n = len(s)
        if n > 0 and not self.search(s):
            i = 0
            cur = self
            #print('i '+str(i))
            while i < n and s[i] in cur.child:
                cur = cur.child[s[i]]
                i += 1
            while i < n:
                cur.child[s[i]] = trieNode()
                cur = cur.child[s[i]]
                i += 1
            cur.val = True
    def search(self,s):
        '''take a string s
        return the node where s ends
        or False if s not in trie
        '''
        hit = self.partialHit(s)
        if hit is None:
            return(False)
        else:
            return(hit.val)

    def partialHit(self,s):
        '''
        return None if not partial hit found
        otherwise return the node where partial hit ends
        '''
        n = len(s)
        if n == 0:
            return(None)
        else:
            cur = self
            for i in s:
                if i in cur.child:
                    cur = cur.child[i]
                else:
                    return(None)
            return(cur) #could partial or full hit
#x = Solution()
#print(x.wordSearchII(["aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","aaaaaaaaaaaaaaaaaaaaaaaaaaaaab"], ["baaaaaaaaaaaaa","a","aa","aaaa","aaaax","abaaabbaz"]))
'''            
x = trieNode()
print(x.search('s'))
print(x.insert('s'))
print(x.insert('shell'))
print(x.search('s'))
print(x.search('she'))
'''

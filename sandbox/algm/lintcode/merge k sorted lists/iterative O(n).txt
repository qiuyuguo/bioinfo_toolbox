"""
Definition of ListNode
class ListNode(object):

    def __init__(self, val, next=None):
        self.val = val
        self.next = next
"""
class Solution:
    """
    @param lists: a list of ListNode
    @return: The head of one sorted list.
    """
    def mergeKLists(self, lists):
        # write your code here
        #do merging for two lists each time
        #0+1, 2+3,4+5,6+7...
        #then 0+2,4+6...
        #then 0+4...
        n = len(lists)
        if n == 0:
            return(None)
        ret = lists[:]
        dist = 1
        while n > dist:
            #print('dist:'+str(dist))
            for i in range(0,n,dist*2):
                #print('i:'+str(i))
                if i + dist < n:
                    #print('i+dist:'+str(i+dist))
                    ret[i] = mergeTwo(ret[i],ret[i+dist])
            dist *= 2
        #for i in range(n):
        #    if ret[i]:
        #        print(str(i)+":"+str(ret[i].val))
        return(ret[0])
def mergeTwo(list1,list2):
    """
    merge two lists
    """
    if list1 is None:
        return(list2)
    elif list2 is None:
        return(list1)
    else:
        dummyHead = ListNode(0)
        dummy = dummyHead
        while list1 and list2:
            if list1.val < list2.val:
                dummy.next = list1
                list1 = list1.next
            else:
                dummy.next = list2
                list2 = list2.next
            dummy = dummy.next
        if list1:
            dummy.next = list1
        else:
            dummy.next = list2
        return(dummyHead.next)
#x= Solution()
#f = ListNode(-1,ListNode(5,ListNode(11)))
#s = ListNode(6,ListNode(10))
#y = x.mergeKLists([None,f,None,s])
#while y:
#    print(y.val)
#    y = y.next


    
    
        



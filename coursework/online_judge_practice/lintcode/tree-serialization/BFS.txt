"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:

    '''
    @param root: An object of TreeNode, denote the root of the binary tree.
    This method will be invoked first, you should design your own algorithm 
    to serialize a binary tree which denote by a root node to a string which
    can be easily deserialized by your own "deserialize" method later.
    '''
    def serialize(self, root):
        # write your code here
        #use BFS
        if not root:
            return("")
        import Queue
        q = Queue.Queue()
        q.put(root)
        ret = [str(root.val)]
        while not q.empty():
            lvlSize = q.qsize()
            for i in range(lvlSize):
                cur = q.get()
                if cur.left:
                    q.put(cur.left)
                    ret.append(str(cur.left.val))
                else:
                    ret.append("#")
                if cur.right:
                    q.put(cur.right)
                    ret.append(str(cur.right.val))
                else:
                    ret.append("#")
        return(','.join(ret))
#x = Solution()
#r = TreeNode(3)
#r.left = TreeNode(9)
#r.right = TreeNode(20)
#r.right.right = TreeNode(7)
#print(x.serialize(r))
    def deserialize(self,serialTree):
        input = serialTree.split(',')
        import Queue
        q = Queue.Queue()
        if serialTree == '' or len(input) == 0 or input[0] == '#':
            return(None)
        root = TreeNode(int(input[0]))
        q.put(root)
        pos = 1
        while not q.empty():
            lvlSize = q.qsize()
            for i in range(lvlSize):
                cur = q.get()
                if input[pos] != '#':
                    cur.left = TreeNode(int(input[pos]))
                    q.put(cur.left)
                pos += 1
                if input[pos] != '#':
                    cur.right = TreeNode(int(input[pos]))
                    q.put(cur.right)
                pos += 1
        return(root)
#x = Solution()
#print(x.serialize(x.deserialize('3,9,20,#,#,15,7,#,#,#,#')))
                
            
        
        
            


class Solution:
    # @param s: A string s
    # @param dict: A dictionary of words dict
    def wordBreak(self, s, dict):
        # write your code here
        #use DP
        n = len(s)
        if s in dict or n == 0:
            return(True)
        #use different algorithms depending on
        #the input variables
        if len(s) > len(dict):
            return(dictOptBreak(s,dict))
        else:
            return(stringOptBreak(s,dict))
def dictOptBreak(s,dict):
    n = len(s)
    o = [False] * (n+1)
    o[0] = True
    realDict = {}
    for i in dict:
        realDict[i] = True
    for i in xrange(1,n+1):
        for j in realDict:
            lenJ = len(j)
            if lenJ <= i:
                if o[i-lenJ] and s[i-lenJ:i] == j:
                    o[i] = True
                    break
    return(o[-1])
def stringOptBreak(s,dict):
    n = len(s)
    o = [False]*(n+1) #store solution for s[0..i-1], i is length
    o[0] = True
    realDict = {}
    for i in dict:
        realDict[i] = True
    for i in xrange(1,n+1):
        for j in xrange(i-1,-1,-1):
            if o[j] and s[j:i] in dict:
                o[i] = True
                break
    return(o[-1])
#x = Solution()
#print(x.wordBreak('aaab',{'aa':True,'ab':True}))

1. sorting
Arrays.sort(int[] A);
Arrays.sort(Comparable[] A);
Arrays.sort(Object[] A, Comparator x);
2. ArrayList
//array implementation of list
ArrayList<String> x = new ArrayList<String>();
x.add("first");
x.add(0,"second");
System.out.println(x.get(1).equals("first"));

try {
	x.set(2, "third");
} catch (IndexOutOfBoundsException e) {
	System.out.println("IndexOutOfBoundsException");
}
x.remove(0);
System.out.println(x.get(0).equals("first"));
x.set(0, "newFirst");
System.out.println(x.get(0).equals("newFirst"));

//x.removeAll(Collection<?> c);
//x.retainAll(Collection<?> c);
System.out.println(x.size() == 1);

3. LinkedList
//doubly-linked list implementation of list and deque
LinkedList<Integer> x = new LinkedList<Integer>();
x.add(1);
x.add(2);
x.addFirst(3);
x.addLast(4);
System.out.println(x.get(0) == 3); //linear time cost
System.out.println(x.getFirst() == 3); //constant time
System.out.println(x.getLast() == 4); //constant time
x.offer(5);
x.offerFirst(6);
x.offerLast(7);
System.out.println(x.peek() == 6);
System.out.println(x.pop() == 1);

4. HashSet
Set<Integer> x = new HashSet<Integer>();
x.add(1);
x.add(1);
if (x.contains(1)) {
	System.out.println(1);
}
List<Integer> y = new LinkedList<Integer>();
y.add(1);
y.add(2);
y.add(3);
x.addAll(y);
if (x.contains(3)) {
	System.out.println(3);
}
System.out.println(x.isEmpty() == false);
System.out.println(x.size() == 3);
x.remove(1);
if (!x.contains(1)) {
	System.out.println("no " + 1);
}

5. HashMap
HashMap<Integer, String> x = new HashMap<Integer, Integer>();
System.out.println(x.containsKey(1) == false);
x.put(1,"one");
System.out.println(x.containsKey(1) == true);
System.out.println(x.isEmpty() == false);
for (Integer i : x.keySet()) {
	System.out.println(x.get(i));
}
//x.putAll(Map<?,?> m);
System.out.println(x.size() == 1);
6. PriorityQueue
PriorityQueue<String> x = new PriorityQueue<String> ();
x.offer("x");
x.offer("b");
System.out.println(x.peek().equals("b"));
System.out.println(x.poll().equals("b"));

7. Deque
//Deque is an interface
//Deque can be used as a stack or a queue
Deque<Integer> x = new LinkedList<Integer> ();
x.offerLast(1); //same as offer() in Queue
x.offerLast(2);
System.out.println(1 == x.pollFirst()); //same as poll() in Queue
System.out.println(2 == x.peekFirst()); //same as peek() in Queue

x.addFirst(-1); //push() in Stack
System.out.println(x.removeFirst() == -1); //same as pop() in Stack

8. Queue
Queue<Integer> x = new LinkedList<Integer> ();
x.offer(1);
x.offer(2);
System.out.println(x.peek() == 1);
System.out.println(x.poll() == 1);
9. Stack
//use Deque as Stack is deprecated
Deque<Integer> x = new Deque<Integer> ();
x.addFirst(1);
x.addFirst(2);
System.out.println(x.removeFirst() == 2);
System.out.println(x.peekFirst() == 1);

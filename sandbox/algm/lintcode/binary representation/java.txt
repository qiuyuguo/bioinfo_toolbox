public class Solution {
    /**
     *@param n: Given a decimal number that is passed in as a string
     *@return: A string
     */
    public String binaryRepresentation(String s) {
        // write your code here
        		int maxFrac = 32; //max length of fractional part
		int dot = s.indexOf('.');		
		if (dot == -1) {
			//no fractional part
			return(Integer.toBinaryString(Integer.parseInt(s)));		
		}
		int intPart = Integer.parseInt(s.substring(0, dot));
		double fracPart = Double.parseDouble(s.substring(dot));
		String fracRet = "";
		if(fracPart == 0) {
		    return(Integer.toBinaryString(intPart));
		}
		for (int i = 0; i < maxFrac; i++) {
			fracPart = fracPart * 2;
			short cur = (short) Math.floor(fracPart);
			fracPart = fracPart - cur;
			fracRet = fracRet + cur;
			if(fracPart == 0) break;						
		}
		if (fracPart != 0) {
			return("ERROR");
		}		
		return(Integer.toBinaryString(intPart) + "." + fracRet);
    }
}

#!/usr/bin/env perl

use strict;
use warnings;

#some constants
my $MAGIC_NUMBER = 11111111;
my %ENCODING = ('00'=>'ASCII','01'=>'UTF8','02'=>'UTF16');

die "usage: $0 [-d] <file>" unless @ARGV>=1;
my $unzip = 0;
if($ARGV[0] eq '-d') {
    $unzip = 1;
    warn "NOTICE: decompressing...\n";
    shift @ARGV;
}
my $file = shift @ARGV;

if($unzip) {
    &decompress($file);
} else{
    &compress($file);
}

#######################
sub decompress {
    my $file = shift;
    my $tree = {}; #we use hash to represent the binary tree
    my $tree_len = 0;
    my $buf;
    my $encoding;

    open IN,"<",$file or die "Failed to open: $!\n";
    binmode(IN) or die "Failed to binmode: $!\n";
#determine if this is huffman compressed file
    read(IN,$buf,1) or die "Failed to read: $!\n";
    $buf = unpack "b*",$buf;
    die "Wrong magic number: <<$buf>>\n" unless $buf eq $MAGIC_NUMBER;

#read encoding scheme
    read(IN,$buf,1) or die "Failed to read: $!\n";
    $buf = unpack "h*",$buf;
    if($ENCODING{$buf}) {
	$encoding = $ENCODING{$buf};
	warn "NOTICE: $encoding\n";
    } else {
	die "undefined encoding: $buf\n";
    }

#read tree length
    read(IN,$tree_len,1) or die "Failed to read: $!\n";
    $tree_len = unpack "L*",$tree_len;
    
#rebuild tree
    for my $i(1..$tree_len) {
	my ($code,$char);
	read(IN,$code,1) or die "Failed to read: $!\n";
	$code = unpack "b*",$code;
	read(IN,$char,1) or die "Failed to read: $!\n";
	$char = unpack "C*",$char;

	$tree->{$code} = $char;
    }
#decode
    my $leftover; #keeps leftover bits from last byte
    while(read(IN,$buf,1)) {
	$buf = unpack "b*",$buf;
	for my $i(split '',$buf) {
	    if($i eq '0') {
		$leftover .= $i;
		!!!this is not exactly correct, see how tree is built
		print $tree->{$leftover};
		$leftover = undef;
	    } else {
		$leftover .= $i;
	    }
	}
    }
    warn "final leftover: $leftover\n";
    close IN;
}
sub compress {
    my $file = shift;
    my $tree = &build_tree($file);
    binmode(STDOUT) or die "binmode failed: $!\n";
    #write magic number
    print (pack "b*", $MAGIC_NUMBER);
    #write encoding scheme
    print (pack "b*", hex("00")); #default scheming: ASCII
    #write tree length
    print (pack "C*", $tree_len); #default scheming: ASCII
    #write tree
    #write converted code

    #write padding for last byte
    close STDOUT;
}
sub tree_building {
    my $file = shift;
    my %tree;
    my %freq;
    my $buf;
    open IN,"<",$file or die "failed to open: $!\n";
    while(read(IN,$buf,1)) {
	$freq{$buf}++;
    }

    sort {$freq{$a} <=> $freq{$b}} keys %tree; #sort in increasing order
    for 
    111110100
    1 denotes right child, 0 denotes left child
    repeatedly traver the tree until we hits a leaf node

    return \%tree;
}

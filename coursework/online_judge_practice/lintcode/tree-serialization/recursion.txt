"""
Definition of TreeNode:
class TreeNode:
    def __init__(self, val):
        self.val = val
        self.left, self.right = None, None
"""
class Solution:

    '''
    @param root: An object of TreeNode, denote the root of the binary tree.
    This method will be invoked first, you should design your own algorithm 
    to serialize a binary tree which denote by a root node to a string which
    can be easily deserialized by your own "deserialize" method later.
    '''
    def serialize(self, root):
        # write your code here
        return(','.join(preOrder(root)))

    def deserialize(self,serialTree):
        input = serialTree.split(',')
        if serialTree == '' or len(input) == 0 or input[0] == '#':
            return(None)
        import Queue
        q = Queue.Queue()
        for i in input:
            q.put(i)
        return(revPreOrder(q))
def revPreOrder(q):        
    if q.empty():
        return(None)
    cur = q.get()
    root = None
    if cur != '#':
        root = TreeNode(cur)
        root.left = revPreOrder(q)
        root.right = revPreOrder(q)
    return(root)
def preOrder(root):
    #use pre-order traversal
    if not root:
        return(['#'])
    ret = []
    ret.append(str(root.val))
    ret.extend(preOrder(root.left))
    ret.extend(preOrder(root.right))
    return(ret)
#x = Solution()
#r = TreeNode(3)
#r.left = TreeNode(9)
#r.right = TreeNode(20)
#r.right.right = TreeNode(7)
#print(x.serialize(r))    
#x = Solution()
#print(x.serialize(x.deserialize('3,9,20,#,#,15,7,#,#,#,#')))
                
            
        
        
            


#!/usr/bin/env perl

use warnings;
use strict;
use Pod::Usage;
use Getopt::Long;
use File::Copy qw/move/;

my ($robust, $help, $quiet);

GetOptions('robust' => \$robust, 'quiet|q' => \$quiet, 'help|h'=>\$help) or pod2usage ({-verbose => 0, -exitval => 2, -output => \*STDERR}); #however, all arguments inside pod2usage can be omitted
	
$help and pod2usage ({-verbose=>1, -exitval=>1, -output=>\*STDOUT}); #default output filehandle is STDERR unless the exit value is less than 2
if (@ARGV != 2) {
	pod2usage ({-verbose=>0, -exitval=>2, -output=>\*STDERR}); #this is invoked by an error, so better go to STDERR
}

if (!$robust) {
	if (-d $ARGV[1]) {
		$ARGV[1] =~ s%(.*)/$%$1%s unless $ARGV[1] =~ m%^/$%;
		my $tmp=0;
		if ($quiet) {
			$tmp=1;
		} else {
			if (-e "$ARGV[1]/$ARGV[0]") {
				print "$ARGV[1]/$ARGV[0] exists. Do you want to replace it? [Y/N]\n";
				chomp (my $answer=<STDIN>);
				$answer =~ m/^Y|YES/i ? $tmp=1 : die "Exit without replacing it\n";
			} else {
				$tmp=1;
			}
		}
		rename $ARGV[0],"$ARGV[1]/$ARGV[0]" or die "cannot remove $ARGV[0] $ARGV[1]: $!\n" if $tmp;
	} else {
		rename $ARGV[0], $ARGV[1] or die "cannot rename $ARGV[0] $ARGV[1]: $!\n";
	}
} else {
	print "Robust mode: any existing file will be replaced without warning.\n";
	move $ARGV[0],$ARGV[1] or die "cannot move $ARGV[0], $ARGV[1]: $!\n";
}

#the blank between each tag is mandatory!!!
__END__

=head1 NAME

mv_like - an mv-like program

=head1 SYNOPSIS

mv_like [options] [file1 ...] [file2 ...]

 Options:
	-h, -help		print help information
	-robust			rename or move file in a more system-robust manner
	-q, -quiet		enter quiet mode

=head1 OPTIONS

=over 8

=item B<-help>

Print a brief help message and exits

=item B<-robust>

Invoke a system-portable function to rename or move file 

=item B<-quiet>

Suppress warning for replacing an existing file.

=back

=head1 DESCRIPTION

B<This program> will rename a file or move it to a user-specified directory. 

=cut
